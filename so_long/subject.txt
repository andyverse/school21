			Предисловие

Быть разработчиком — отличная вещь для создания собственной игры.
Но для хорошей игры нужны хорошие активы. Чтобы создавать 2D-игры, вам придется
искать плитки, наборы плиток, спрайты и листы спрайтов.
К счастью, некоторые талантливые художники готовы делиться своими работами на
таких платформах, как: itch.io.
В любом случае старайтесь уважать чужой труд.

			Цели

Пришло время создать базовый проект компьютерной графики! so long поможет вам
улучшить свои навыки в следующих областях: управление окнами, обработка событий,
цвета, текстуры и так далее.
Вы собираетесь использовать школьную графическую библиотеку: MiniLibX! Эта
библиотека была разработана внутри компании и включает основные необходимые
инструменты для открытия окна, создания изображений и работы с событиями
клавиатуры и мыши.
Другие цели аналогичны всем остальным целям на этот первый год: быть строгим,
повысить уровень программирования на C, использовать базовые алгоритмы,
провести некоторое информационное исследование и так далее.

			Общие инструкции

• Ваш проект должен быть написан на C.
• Ваш проект должен быть написан в соответствии с Нормой. Если у вас есть
бонусные файлы/функции, они включены в проверку нормы, и вы получите 0, если
внутри есть ошибка нормы.
• Ваши функции не должны завершаться неожиданно (ошибка сегментации, ошибка шины,
двойное освобождение и т. д.), за исключением неопределенного поведения. Если это
произойдет, ваш проект будет считаться неработоспособным и получит 0 баллов при
оценке.
• При необходимости все пространство памяти, выделенное в куче, должно быть
надлежащим образом освобождено. Никаких утечек не допустимо.
• Если субъект требует этого, вы должны отправить Makefile, который скомпилирует
ваши исходные файлы в требуемый результат с флагами -Wall, -Wextra и -Werror,
используйте cc, и ваш Makefile не должен перекомпоновываться.
• Ваш Makefile должен как минимум содержать правила $(NAME), all, clean, fclean
и re.
• Чтобы включить бонусы в свой проект, вы должны включить бонусное правило в свой
Makefile, которое добавит все различные заголовки, библиотеки или функции,
запрещенные в основной части проекта. Бонусы должны быть в другом файле
_bonus.{c/h}, если в теме не указано ничего другого. Обязательная и бонусная
части оцениваются отдельно.
• Если ваш проект позволяет вам использовать ваш libft, вы должны скопировать его
исходники и связанный с ним файл Makefile в папку libft с соответствующим файлом
Makefile. Makefile вашего проекта должен скомпилировать библиотеку с помощью
Makefile, а затем скомпилировать проект.
• Мы рекомендуем вам создавать тестовые программы для вашего проекта, даже если
эту работу не нужно будет отправлять и она не будет оцениваться. Это даст вам
возможность легко проверить свою работу и работу ваших коллег. Вы найдете эти
тесты особенно полезными во время вашей защиты. Действительно, во время защиты
вы можете использовать свои тесты и/или тесты коллеги, которого вы оцениваете.
• Отправьте свою работу в назначенный репозиторий git. Оцениваться будет только
работа в репозитории git. Если Deepthought будет назначен для оценки вашей работы,
это будет сделано после вашей коллегиальной оценки. Если во время оценивания
Deepthought произойдет ошибка в каком-либо разделе вашей работы, оценка будет
остановлена.


			Обязательная часть

Program name:			so_long
Turn in files:			Makefile, *.h, *.c, maps
Makefile:				NAME, all, clean, fclean, re
Arguments:				A map in format *.ber
External functs:		* open, close, read, write,
						malloc, free, perror,
						strerror, exit

						* All functions of the math
						library (-lm compiler option,
						man man 3 math)

						* All functions of the MiniLibX

						* ft_printf and any equivalent YOU coded
Libft authorized:		Yes
Description:			Вы должны создать простую 2D-игру, в которой дельфин
						убегает с Земли, съев немного рыбы. Вместо дельфина,
						рыбы и Земли вы можете использовать любого персонажа,
						любой коллекционный предмет и любое место.

Ваш проект должен соответствовать следующим правилам:
• Вы должны использовать MiniLibX. Либо версия, доступная на школьных машинах,
либо установка из исходников.
• Вы должны сдать Makefile, который скомпилирует ваши исходные файлы. Он не
должен повторно связываться.
• Ваша программа должна принимать в качестве параметра файл описания карты с
расширением .ber.

			Игра

• Цель игрока — собрать все предметы коллекционирования на карте, а затем сбежать,
выбрав кратчайший путь.
• Клавиши W, A, S и D должны использоваться для перемещения главного героя.
• Игрок должен иметь возможность двигаться в этих 4 направлениях: вверх, вниз,
влево, вправо.
• Игрок не должен входить в стены.
• При каждом перемещении в оболочке должно отображаться текущее количество
перемещений.
• Вы должны использовать 2D вид (сверху вниз или профиль).
• Игра не обязательно должна быть в реальном времени.
• Хотя в приведенных примерах показана тема дельфинов, вы можете создать мир по
своему желанию.

			Графическое управление

• Ваша программа должна отображать изображение в окне.
• Управление вашим окном должно оставаться плавным (переход в другое окно,
свертывание и т. д.).
• Нажатие ESC должно закрыть окно и выйти из программы в чистом виде.
• Щелчок по крестику в рамке окна должен закрыть окно и выйти из программы в
чистом виде.
• Использование образов MiniLibX обязательно.

			Карта

• Карта должна быть построена из 3 компонентов: стены, предметы коллекционирования
и свободное пространство.
• Карта может состоять только из этих 5 символов:
0 для пустого места,
1 для стены,
C для коллекционирования,
E для выхода из карты,
P для начальной позиции игрока.

Вот простая действующая карта:

1111111111111
10010000000C1
1000011111001
1P0011E000001
1111111111111

Карта должна содержать как минимум 1 выход, 1 предмет коллекционирования и 1
начальную позицию.
• Карта должна быть прямоугольной.
• Карта должна быть закрыта/окружена стенами. Если это не так, программа должна
вернуть ошибку.
• Вам не нужно проверять, есть ли на карте правильный путь.
• Вы должны уметь анализировать карты любого типа, если они соответствуют
приведенным выше правилам.
• Еще один пример минимальной карты .ber:

1111111111111111111111111111111111
1E0000000000000C00000C000000000001
1010010100100000101001000000010101
1010010010101010001001000000010101
1P0000000C00C0000000000000000000C1
1111111111111111111111111111111111

Если в файле обнаружена какая-либо неправильная конфигурация любого рода,
программа должна завершиться корректно и вернуть «Error\n», за которым следует
явное сообщение об ошибке по вашему выбору.

			Бонусная часть

Обычно вам предлагается разработать свои собственные оригинальные дополнительные
функции. Впрочем, позже будут гораздо более интересные графические проекты. Они
ждут вас!! Не теряйте слишком много времени на это задание!
Вам разрешено использовать другие функции для завершения бонусной части, если их
использование оправдано во время вашей оценки. Быть умным!
Вы получите дополнительные баллы, если:
• Заставьте игрока проиграть, когда он коснется вражеского патруля.
• Добавьте анимацию спрайтов.
• Отображать количество движений прямо на экране, а не записывать его в оболочке.

	Бонусная часть будет оцениваться только в том случае, если обязательная часть
	будет ИДЕАЛЬНОЙ. Идеальный означает, что обязательная часть была полностью
	выполнена и работает без сбоев. Если вы не выполнили ВСЕ обязательные
	требования, ваша бонусная часть вообще не будет оцениваться.

