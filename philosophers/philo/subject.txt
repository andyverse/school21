Глава I
		Введение
Философия (от греческого philosophia, буквально «любовь к мудрости») — это изучение
общих и фундаментальных вопросов о существовании, знании, ценностях, разуме, разуме
и языке. Такие вопросы часто ставятся как проблемы, которые необходимо изучить или
решить. Этот термин, вероятно, был придуман Пифагором (ок. 570–495 до н. Э.).
Философские методы включают вопросы, критическую дискуссию, рациональную аргументацию
и систематическое изложение.
К классическим философским вопросам относятся: можно ли что-либо узнать и доказать?
Что самое настоящее? Философы также задают более практичные и конкретные вопросы,
такие как: есть ли лучший способ жить? Лучше быть справедливым или несправедливым
(если это сойдет с рук)? Есть ли у людей свобода воли?
Исторически сложилось так, что «философия» охватывала любую совокупность знаний.
Со времен древнегреческого философа Аристотеля до XIX века «натурфилософия» включала
в себя астрономию, медицину и физику. Например, «Математические принципы натуральной
философии» Ньютона 1687 года позже стали классифицировать как книгу по физике.
В 19 веке рост современных исследовательских университетов привел к тому, что
академическая философия и другие дисциплины стали профессиональнее и
специализировались. В современную эпоху некоторые исследования, которые традиционно
были частью философии, стали отдельными академическими дисциплинами, включая
психологию, социологию, лингвистику и экономику.
Другие исследования, тесно связанные с искусством, наукой, политикой или другими
занятиями, оставались частью философии. Например, красота объективна или субъективна?
Много ли научных методов или только один? Политическая утопия – это обнадеживающая
мечта или безнадежная фантазия? Основные разделы академической философии включают
метафизику («занимающуюся фундаментальной природой реальности и бытия»),
эпистемологию («о природе и основаниях познания [и]… его границ и достоверности»),
этику, эстетику, политическая философия, логика и философия науки.

Глава II
		Общие инструкции
• Ваш проект должен быть написан на C.
• Ваш проект должен быть написан в соответствии с Нормой. Если у вас есть бонусные
файлы/функции, они включены в проверку нормы, и вы получите 0, если внутри есть
ошибка нормы.
• Ваши функции не должны завершаться неожиданно (ошибка сегментации, ошибка шины,
двойное освобождение и т. д.), за исключением неопределенного поведения. Если это
произойдет, ваш проект будет считаться неработоспособным и получит 0 баллов при
оценке.
• При необходимости все пространство памяти, выделенное в куче, должно быть должным
образом освобождено. Никаких утечек не допустимо.
• Если субъект требует этого, вы должны отправить Makefile, который скомпилирует
ваши исходные файлы в требуемый результат с флагами -Wall, Wextra и -Werror,
используйте cc, и ваш Makefile не должен перелинковываться.
• Ваш Makefile должен как минимум содержать правила $(NAME), all, clean, fclean
и re.
• Чтобы включить бонусы в свой проект, вы должны включить бонусное правило в свой
Makefile, которое добавит все различные заголовки, библиотеки или функции,
запрещенные в основной части проекта. Бонусы должны быть в другом файле _bonus.{c/h},
если в теме не указано ничего другого. Обязательная и бонусная части оцениваются
отдельно.
• Если ваш проект позволяет вам использовать ваш libft, вы должны скопировать его
исходники и связанный с ним файл Makefile в папку libft с соответствующим файлом
Makefile. Makefile вашего проекта должен скомпилировать библиотеку с помощью
Makefile, а затем скомпилировать проект.
• Мы рекомендуем вам создавать тестовые программы для вашего проекта, даже если
эту работу не нужно будет отправлять и она не будет оцениваться. Это даст вам
возможность легко проверить свою работу и работу ваших коллег. Вы найдете эти
тесты особенно полезными во время вашей защиты. Действительно, во время защиты
вы можете использовать свои тесты и/или тесты коллеги, которого вы оцениваете.
Отправьте свою работу в назначенный репозиторий git. Оцениваться будет только
работа в репозитории git. Если Deepthought будет назначен для оценки вашей работы,
это будет сделано после вашей коллегиальной оценки. Если во время оценивания
Deepthought произойдет ошибка в каком-либо разделе вашей работы, оценка будет
остановлена.

Глава III
		Обзор
Вот что вам нужно знать, если вы хотите добиться успеха в этом задании:
• Один или несколько философов сидят за круглым столом.
	В центре стола стоит большая тарелка со спагетти.
• Философы попеременно едят, думают или спят.
	Пока они едят, они не думают и не спят;
	думая, они не едят и не спят; и, конечно, во сне они не едят и не думают.
• На столе также лежат вилки. Вилок столько же, сколько философов.
• Поскольку подавать и есть спагетти только одной вилкой очень неудобно, философ
берет их правую и левую вилки, чтобы есть, по одной в каждую руку.
• Покончив с едой, философ кладет вилки обратно на стол и засыпает. Проснувшись,
они снова начинают думать. Симуляция останавливается, когда философ умирает от голода.
• Каждый философ должен есть и никогда не должен голодать.
• Философы не разговаривают друг с другом.
• Философы не знают, что другой философ вот-вот умрет.
• Нет необходимости говорить, что философы должны избегать смерти!

Глава IV
		Глобальные правила
Вы должны написать программу для обязательной части и еще одну для бонусной части
(если вы решите сделать бонусную часть). Оба они должны соблюдать следующие
правила:
• Глобальные переменные запрещены!
• Ваша(ие) программа(ы) должна(ы) принимать следующие аргументы:
количество_философов время_умереть время_есть_время_спать
[число_раз_каждого_философа_должен_есть]
◦ number_of_philosophers: количество философов, а также количество разветвлений.
◦ time_to_die (в миллисекундах): если философ не начал есть time_to_die в
миллисекундах с начала своего последнего приема пищи или начала симуляции, он
умирает.
◦ time_to_eat (в миллисекундах): время, которое требуется философу, чтобы поесть.
За это время им нужно будет держать две вилки.
◦ time_to_sleep (в миллисекундах): время, которое философ проведет во сне.
◦ number_of_times_each_philosopher_must_eat (необязательный аргумент): если все
философы съели не менее number_of_times_each_philosopher_must_eat раз, симуляция
останавливается. Если не указано иное, симуляция останавливается, когда философ умирает.
• У каждого философа есть число от 1 до number_of_philosophers.
• Философ номер 1 сидит рядом с философом номер number_of_philosophers.
Любой другой философ с номером N находится между философом с номером N - 1 и
философом с номером N + 1.

О логах вашей программы:
• Любое изменение состояния философа должно быть оформлено следующим образом:
	◦ timestamp_in_ms X has taken a fork
	◦ timestamp_in_ms X is eating
	◦ timestamp_in_ms X is sleeping
	◦ timestamp_in_ms X is thinking
	◦ timestamp_in_ms X died
Замените timestamp_in_ms на текущую метку времени в миллисекундах.
и X с номером философа.
• Отображаемое сообщение о состоянии не следует путать с другим сообщением.
• Сообщение о смерти философа должно отображаться не более чем через 10 мс после
фактической смерти философа.
• Опять же, философы должны избегать смерти!

Глава V
		Обязательная часть

Program name:		philo
Turn in files:		Makefile, *.h, *.c, in directory philo/
					Makefile NAME, all, clean, fclean, re
Arguments:			number_of_philosophers time_to_die time_to_eat
					time_to_sleep	[number_of_times_each_philosopher_must_eat]
External functs.:	memset, printf, malloc, free, write,
					usleep, gettimeofday, pthread_create,
					pthread_detach, pthread_join, pthread_mutex_init,
					pthread_mutex_destroy, pthread_mutex_lock,
					pthread_mutex_unlock
Libft authorized:	No
Description:		Философы с потоками и мьютексами

Особые правила для обязательной части:
• Каждый философ должен быть нитью.
• Между каждой парой философов есть одна развилка. Следовательно, если философов
несколько, то у каждого философа есть вилка слева и вилка справа. Если есть только
один философ, на столе должна быть только одна вилка.
• Чтобы предотвратить дублирование вилок философами, вы должны защитить состояние
вилок с помощью мьютекса для каждого из них.

Глава VI
		Бонусная часть

Program name:		philo_bonus
Turn in files:		Makefile, *.h, *.c, in directory philo_bonus/
					Makefile NAME, all, clean, fclean, re
Arguments:			number_of_philosophers time_to_die time_to_eat
					time_to_sleep [number_of_times_each_philosopher_must_eat]
External functs.:	memset, printf, malloc, free, write, fork, kill,
					exit, pthread_create, pthread_detach, pthread_join,
					usleep, gettimeofday, waitpid, sem_open, sem_close,
					sem_post, sem_wait, sem_unlink
Libft authorized:	No
Description:		Философы с процессами и семафорами

Программа бонусной части использует те же аргументы, что и обязательная программа.
Он должен соответствовать требованиям главы «Глобальные правила».
Конкретные правила для бонусной части:
• Все вилки кладут на середину стола.
• У них нет состояний в памяти, но количество доступных ответвлений представлено
семафором.
• Каждый философ должен быть процессом. Но главным процессом должен быть не
философ.

Глава VII
		Представление и экспертная оценка
Сдайте задание в своем репозитории Git, как обычно. Во время защиты будет
оцениваться только работа внутри вашего репозитория. Не стесняйтесь перепроверять
имена ваших файлов, чтобы убедиться, что они верны.

Каталог обязательных частей: 	philo/
Каталог бонусных частей: 		philo_bonus/