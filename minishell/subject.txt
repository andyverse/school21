        Введение

Существование оболочек связано с самим существованием ИТ. В то время все
разработчики соглашались с тем, что общение с компьютером с помощью выровненных
переключателей 1/0 серьезно раздражало.
Вполне логично, что им пришла в голову идея создать программное обеспечение для
общения с компьютером с помощью интерактивных строк команд на языке, несколько
близком к человеческому.
Благодаря Minishell вы сможете путешествовать во времени и возвращаться к проблемам,
с которыми люди сталкивались, когда Windows не существовало.

        Обязательная часть

Program name:           minishell
Turn in files:          Makefile, *.h, *.c
Makefile:               NAME, all, clean, fclean, re
Argument
External functs.:       readline, rl_clear_history, rl_on_new_line,
                        rl_replace_line, rl_redisplay, add_history,
                        printf, malloc, free, write, access, open, read,
                        close, fork, wait, waitpid, wait3, wait4, signal,
                        sigaction, sigemptyset, sigaddset, kill, exit,
                        getcwd, chdir, stat, lstat, fstat, unlink, execve,
                        dup, dup2, pipe, opendir, readdir, closedir,
                        strerror, perror, isatty, ttyname, ttyslot, ioctl,
                        getenv, tcsetattr, tcgetattr, tgetent, tgetflag,
                        tgetnum, tgetstr, tgoto, tputs
Libft authorized:       Yes
Description:            Write a shell

Ваша оболочка должна:
• Отображение подсказки при ожидании новой команды.
• Иметь трудовой стаж.
• Найдите и запустите правильный исполняемый файл (на основе переменной PATH или
с использованием относительного или абсолютного пути).
• Не используйте более одной глобальной переменной. Подумай об этом. Вам придется
объяснить его назначение.
• Не интерпретировать незакрытые кавычки или специальные символы, которые не
требуются для темы, такие как \ (обратная косая черта) или ; (точка с запятой).
• Handle ’ (одинарная кавычка), который должен препятствовать интерпретации
оболочкой метасимволов в последовательности в кавычках.
• Дескриптор " (двойная кавычка), который должен препятствовать интерпретации
оболочкой метасимволов в заключенной в кавычки последовательности, за исключением
$ (знак доллара).

Реализовать перенаправления:
◦ < должен перенаправлять ввод.
◦ > должен перенаправлять вывод.
◦ << следует указать разделитель, затем считывать ввод, пока не будет видна строка,
содержащая разделитель. Тем не менее, он не должен обновлять историю!
◦ >> следует перенаправлять вывод в режиме добавления.
• Реализовать трубы (символ |). Выход каждой команды в конвейере соединяется со
входом следующей команды через канал.
• Обрабатывать переменные среды ($ с последующей последовательностью символов),
которые должны расширяться до их значений.
• Обрабатывать $? который должен расширяться до состояния выхода самого последнего
запущенного конвейера переднего плана.
• Обрабатывайте ctrl-C, ctrl-D и ctrl-\, которые должны вести себя как в bash.
• В интерактивном режиме:
◦ ctrl-C отображает новое приглашение в новой строке.
◦ ctrl-D закрывает оболочку.
◦ ctrl-\ ничего не делает.
• В вашей оболочке должны быть реализованы следующие встроенные модули:
◦ эхо с опцией -n
◦ cd только с относительным или абсолютным путем
◦ pwd без параметров
◦ экспортировать без параметров
◦ снято без параметров
◦ env без опций и аргументов
◦ выйти без вариантов
Функция readline() может вызвать утечку памяти. Вам не нужно их исправлять. Но
это не означает, что ваш собственный код, да код, который вы написали, может иметь
утечки памяти.

        Следует ограничиться описанием предмета. Все, что не задано, не требуется.
        Если у вас есть какие-либо сомнения относительно требования, используйте
        bash в качестве эталона.


        Бонусная часть

Ваша программа должна реализовать:

• && и || со скобками для приоритетов.
• Подстановочные знаки * должны работать для текущего рабочего каталога.